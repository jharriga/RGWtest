#--------------------------------------------------------------------
# START GLOBAL VARIABLES
#

pollinterval="1m"            # poll.sh interval to gather statistics

#----------------------------------------------------------------------
# Runtimes for various COSbench workstages
# WARNING: if you change these you need to re-run 'writeXML.sh'
# KEY RUNTIME VALUES - used below in FILLvalues_arr and RTvalues_arr
#
runtime_sec="180"                 # Runtime (in sec)  
rgwUSER="johndoe:swift"           # username
#rgwURL="172.16.0.131:5000"       # auth_url connection point
rgwURL="localhost:5000"		      # each client will run its own haproxy
#fillWORKERS=72         # number of workers to use for filling the Cluster
fillWORKERS=15         # number of workers to use for filling the Cluster
#runtestWORKERS=192     # number of workers for running IOWorkload
runtestWORKERS=15      # number of workers for running IOWorkload
#
# Object sizes
#objSIZES="h(4|4|34,64|64|33,65536|65536|33)KB"
objSIZES="h(1|1|50,64|64|15,8192|8192|15,65536|65536|15,1048576|1048576|5)KB"
#
# Number of Containers and Objects
numCONT=5
#numOBJ=22000              # e.g. for 25% fill
#numOBJ=43397              # e.g. for 50% fill
numOBJ=500                # for delWRITE in BAGL
# highest object range for WRITE and DELETE operations
#numOBJmax=$(( (numOBJ * 10) ))  # multiply by ten for growing Object Count
numOBJmax=$numOBJ                # multiply by ten for steady-state Object Count

#########
# DELWRITE workload specific variables
# Container ranges for the Write and Delete operation statements
wrCONT="u(1,2)"
delCONT="u(1,2)"
# Object ranges for the Write and Delete operation statements
# TO ENSURE that we are legitimately writing new objects, we are
#      using a higher objcnt for these than read/list operations
wrOBJ="u(1,${numOBJmax})"
delOBJ="u(1,${numOBJmax})"

#########
# HYBRID Workload specific variables
# Ratios for operation types - MUST add up to 100%
rdRatio=60
wrRatio=16
delRatio=14
listRatio=10
totalRatio=$(( (rdRatio + wrRatio + delRatio + listRatio) ))
if [ $totalRatio -ne 100 ]; then
    echo "var.shinc: Operation ratios (rdRatio, wrRatio, ...) must equal 100%"; exit
fi
# Conf portions for the Read and List operation statements
#   - start at 3 to reserve the first 2 containers for Write and Delete ops
# NOTE: COSbench will FAIL if job attempts to READ a non-existing Object
rdCONF="containers=u(3,${numCONT});objects=u(1,${numOBJ})"
listCONF="${rdCONF}"

#-----------------------------------------------------------------------
# writeXML.sh variables
# Names of COSbench workload files and values to insert into template files
#
# First up - fill/empty workloads
# These workloads are initiated by the fillCluster.sh/emptyCluster.sh scripts
FILLtemplate="XMLtemplates/TMPL_fillCluster.xml"
FILLxml="fillWorkload.xml"
EMPTYtemplate="XMLtemplates/TMPL_emptyCluster.xml"
EMPTYxml="emptyWorkload.xml"
# fillCluster: pre-existing keys in the template file
# also used to populate EMPTYxml
declare -a FILLkeys_arr=("FILLstorage_type"
                       "FILLtimeout"
                       "FILLretry"
                       "FILLauth_type"
                       "FILLconfig"
                       "FILLworkers"
                       "FILLsizes"
                       "FILLnumCont"
                       "FILLnumObj"
                       )
declare -a FILLvalues_arr=("swift"               # storage type
                         "900000"              # timeout (15m)
                         "3"                   # retries
                         "swauth"              # auth_type
                         # config: a bit messy since SED requires "/" be escaped
                         "username=${rgwUSER};password=EMPTY;auth_url=http:\/\/${rgwURL}\/auth\/1.0"
                         "${fillWORKERS}"   # number of workers
                         "${objSIZES}"         # Object sizes
                         "${numCONT}"          # number of Containers
                         "${numOBJ}"           # number of Objects
                         )

#
# Next up - RUNTEST settings
# This COSbench workload is initiated by the runIOworkload.sh script
#RUNTESTtemplate="XMLtemplates/TMPL_hybrid.xml"
RUNTESTtemplate="XMLtemplates/TMPL_deleteWrite.xml"
RUNTESTxml="ioWorkload.xml"
# runtest: pre-existing keys in the RUNTESTtemplate file
declare -a RTkeys_arr=("RUNTESTstorage_type"
                       "RUNTESTtimeout"
                       "RUNTESTretry"
                       "RUNTESTauth_type"
                       "RUNTESTconfig"
                       "RUNTESTworkers"
                       "RUNTESTruntime"
                       "RUNTESTsizes"
                       "RUNTESTnumCont"
                       "RUNTESTnumObj"
                       "RUNTESTrdRatio"
                       "RUNTESTwrRatio"
                       "RUNTESTdelRatio"
                       "RUNTESTlistRatio"
                       "RUNTESTrdConf"
                       "RUNTESTlistConf"
                       "RUNTESTwrCont"
                       "RUNTESTdelCont"
                       "RUNTESTwrObj"
                       "RUNTESTdelObj"
                       )
declare -a RTvalues_arr=("swift"               # storage_type
                         "900000"              # timeout (15m)
                         "3"                   # retries
                         "swauth"              # auth_type
                         # config: a bit messy since SED requires "/" be escaped
                         "username=${rgwUSER};password=EMPTY;auth_url=http:\/\/${rgwURL}\/auth\/1.0"
                         "${runtestWORKERS}"   # workers
                         "${runtime_sec}"      # runtime in seconds
                         "${objSIZES}"         # Object sizes
                         "${numCONT}"          # number of Containers
                         "${numOBJ}"           # number of Objects
                         "${rdRatio}"          # Read ratio
                         "${wrRatio}"          # Write ratio
                         "${delRatio}"         # Delete ratio
                         "${listRatio}"        # List ratio
                         "${rdCONF}"           # config for Read operations
                         "${listCONF}"         # config for List operations
                         "${wrCONT}"           # container range for Write ops
                         "${delCONT}"          # container range for Delete ops
                         "${wrOBJ}"            # object range for Write ops
                         "${delOBJ}"           # object range for Delete ops
                         )
 
#------------------------
# resetRGW.sh variables
longPAUSE="400s"
pool_list=("default.rgw.users.keys" "default.rgw.data.root" ".rgw.root" "default.rgw.control" \
          "default.rgw.gc" "default.rgw.buckets.data" "default.rgw.buckets.index" "default.rgw.buckets.extra" \
          "default.rgw.log" "default.rgw.meta" "default.rgw.intent-log" "default.rgw.usage" "default.rgw.users" \
          "default.rgw.users.email" "default.rgw.users.swift" "default.rgw.users.uid")
numREPLICAS=3                          # how many replicas
preparePTYPE=rep                       # Must be rep (replicated) OR ec (erasure coded)
if [ $preparePTYPE == "rep" ]; then
    REPLICATION="rep"
    k=0
    m=0
    pg_data=2048                       # determine this value by using PGCALC
    pg_index=64                        # determine this value by using PGCALC
    pg=64                              # determine this value by using PGCALC
    fast_read=0
elif [ $preparePTYPE == "ec" ]; then
    REPLICATION="ec"
    k=4
    m=2
    pg_data=4096                       # determine this value by using PGCALC
    pg_index=256                       # determine this value by using PGCALC
    pg=256                             # determine this value by using PGCALC
    fast_read=0
else
    echo "Pool type needs to be defined as rep or ec in vars.shinc"; exit
fi

#------------------------
# runIOworkload.sh vars

# Ceph cluster node hostnames/IP addresses
MONhostname="gprfc037"
RGWhostname="smerf02"

# COSbench vars
#cosPATH="/root/0.4.2.c4"
cosPATH="/root/v0.4.2"

# Timestamp logfile
ts="$(date +%Y%m%d-%H%M%S)"

# Name of the program being run
PROGNAME=$(basename $0)

# LOGFILE - records steps
RESULTSDIR="./RESULTS"
TMPfile="/tmp/jobId.tmp"
LOGFILE="${RESULTSDIR}/${PROGNAME}_${ts}.log"
# Logfile date format, customize it to your wishes
#   - see man date for help
DATE='date +%Y/%m/%d:%H:%M:%S'

# END GLOBAL VARIABLES
#--------------------------------------------------------------------
